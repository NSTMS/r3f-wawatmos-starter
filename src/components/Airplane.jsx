  /*
  Auto-generated by: https://github.com/pmndrs/gltfjsx
  Command: npx gltfjsx@6.2.3 src/assets/Airplane.glb
  */
  import { OrbitControls } from '@react-three/drei';
  const ws = new WebSocket('ws://192.168.43.17:1337');

  import React, { useEffect, useRef } from 'react'
  import { useGLTF } from '@react-three/drei'
  import { useFrame } from '@react-three/fiber';

  const maxSpeed = 5;
  const speed = .1;
  let keyPressed ={}
  export const Airplane = ({airplane}) => {
    const [acc, setAcc] = React.useState({x: 0, y: 0})

    const velocity = useRef(0);

    const rotationMatrix = (roty) => {
        return { x: Math.cos(roty), z: Math.sin(roty) };
    };

    useFrame((state, delta) => {
      if (airplane.current) {
        airplane.current.rotation.y += acc.x * delta;
        velocity.current -= acc.y * delta * 4;
        const { x, z } = rotationMatrix(airplane.current.rotation.y || 0);

        airplane.current.position.x += velocity.current * delta * x;
        airplane.current.position.z += velocity.current * delta * -z;
        velocity.current -= speed * 0.1 * delta; // opÃ³r powietrza
      }
    });
    ws.onmessage = (e) => {
      let data = JSON.parse(e.data)
      setAcc({x: data.x, y: data.y})
      console.log(data);
    }
    // useEffect(() => {
    //   document.addEventListener("keydown", (event) => {
    //     keyPressed[event.key] = true;
    //   });
    //   document.addEventListener("keyup", (event) => {
    //     delete keyPressed[event.key];
    //   });

    //   document.addEventListener("keydown", (e) => {
    //     if (keyPressed["ArrowUp"]) {
    //       velocity.current += velocity.current >= maxSpeed ? 0 : speed;
    //     }
    //     if (keyPressed["ArrowDown"]) {
    //       velocity.current -= velocity.current <= 0 ? 0 : 2 * speed;
    //     }
    //     if (keyPressed["ArrowLeft"]) {
    //       airplane.current.rotation.y += 0.05;
    //       if (airplane.current.rotation.y > Math.PI)
    //         airplane.current.rotation.y = -Math.PI;
    //     }
    //     if (keyPressed["ArrowRight"]) {
    //       airplane.current.rotation.y -= 0.05;
    //       if (airplane.current.rotation.y < -Math.PI)
    //         airplane.current.rotation.y = Math.PI;
    //     }
    //   });
    // }, []);

    const { nodes, materials } = useGLTF("src/assets/Airplane.glb");

    return (
      <group ref={airplane} dispose={null} scale={[0.5, 0.5, 0.5]} rotation={[0, 0, 0]}>
        <mesh geometry={nodes.PUSHILIN_Plane_Circle000.geometry} material={materials.plane} />
      </group>
    );
  };

  useGLTF.preload('src/assets/Airplane.glb')
